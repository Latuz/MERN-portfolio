{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, orderDeliverReducer, orderListMyReducer, orderListReducer } from './reducers/orderReducers';\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  productDelete: productDeleteReducer,\n  productCreate: productCreateReducer,\n  productUpdate: productUpdateReducer,\n  productReviewCreate: productReviewCreateReducer,\n  productTopRated: productTopRatedReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  userUpdate: userUpdateReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  orderDeliver: orderDeliverReducer,\n  orderListMy: orderListMyReducer,\n  orderList: orderListReducer\n});\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {};\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;\n/*\r\n\r\n\r\n\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers';\r\nimport { cartReducer } from './reducers/cartReducers';\r\n\r\n\r\n\r\n\r\n\r\nconst reducer = combineReducers({\r\n\tproductList    : productListReducer,\r\n\tproductDetails : productDetailsReducer,\r\n\tcart           : cartReducer\r\n});\r\n\r\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\r\n\r\nconst initialState = {\r\n\tcart : { cartItems: cartItemsFromStorage }\r\n};\r\n\r\nconst middleware = [\r\n\tthunk\r\n];\r\n\r\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\r\n\r\nexport default store;\r\n*/","map":{"version":3,"sources":["D:/Projects/ecomm/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","cartReducer","orderCreateReducer","orderDetailsReducer","orderPayReducer","orderDeliverReducer","orderListMyReducer","orderListReducer","reducer","productList","productDetails","productDelete","productDeleteReducer","productCreate","productCreateReducer","productUpdate","productUpdateReducer","productReviewCreate","productReviewCreateReducer","productTopRated","productTopRatedReducer","cart","userLogin","userLoginReducer","userRegister","userRegisterReducer","userDetails","userDetailsReducer","userUpdateProfile","userUpdateProfileReducer","userList","userListReducer","userDelete","userDeleteReducer","userUpdate","userUpdateReducer","orderCreate","orderDetails","orderPay","orderDeliver","orderListMy","orderList","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","initialState","cartItems","shippingAddress","userInfo","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,kBAAT,EAA6BC,qBAA7B,QAA0D,4BAA1D;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SACCC,kBADD,EAECC,mBAFD,EAGCC,eAHD,EAICC,mBAJD,EAKCC,kBALD,EAMCC,gBAND,QAOO,0BAPP;AASA,MAAMC,OAAO,GAAGb,eAAe,CAAC;AAC/Bc,EAAAA,WAAW,EAAWV,kBADS;AAE/BW,EAAAA,cAAc,EAAQV,qBAFS;AAG/BW,EAAAA,aAAa,EAASC,oBAHS;AAI/BC,EAAAA,aAAa,EAASC,oBAJS;AAK/BC,EAAAA,aAAa,EAASC,oBALS;AAM/BC,EAAAA,mBAAmB,EAAGC,0BANS;AAO/BC,EAAAA,eAAe,EAAOC,sBAPS;AAQ/BC,EAAAA,IAAI,EAAkBpB,WARS;AAS/BqB,EAAAA,SAAS,EAAaC,gBATS;AAU/BC,EAAAA,YAAY,EAAUC,mBAVS;AAW/BC,EAAAA,WAAW,EAAWC,kBAXS;AAY/BC,EAAAA,iBAAiB,EAAKC,wBAZS;AAa/BC,EAAAA,QAAQ,EAAcC,eAbS;AAc/BC,EAAAA,UAAU,EAAYC,iBAdS;AAe/BC,EAAAA,UAAU,EAAYC,iBAfS;AAgB/BC,EAAAA,WAAW,EAAWlC,kBAhBS;AAiB/BmC,EAAAA,YAAY,EAAUlC,mBAjBS;AAkB/BmC,EAAAA,QAAQ,EAAclC,eAlBS;AAmB/BmC,EAAAA,YAAY,EAAUlC,mBAnBS;AAoB/BmC,EAAAA,WAAW,EAAWlC,kBApBS;AAqB/BmC,EAAAA,SAAS,EAAalC;AArBS,CAAD,CAA/B;AAwBA,MAAMmC,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAAoCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAApC,GAAoF,EAAjH;AAEA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IAAmCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAnC,GAAkF,IAA9G;AAEA,MAAMI,0BAA0B,GAAGL,YAAY,CAACC,OAAb,CAAqB,iBAArB,IAChCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CADgC,GAEhC,EAFH;AAIA,MAAMK,YAAY,GAAG;AACpB5B,EAAAA,IAAI,EAAQ;AACX6B,IAAAA,SAAS,EAASR,oBADP;AAEXS,IAAAA,eAAe,EAAGH;AAFP,GADQ;AAKpB1B,EAAAA,SAAS,EAAG;AAAE8B,IAAAA,QAAQ,EAAEL;AAAZ;AALQ,CAArB;AAQA,MAAMM,UAAU,GAAG,CAClBxD,KADkB,CAAnB;AAIA,MAAMyD,KAAK,GAAG5D,WAAW,CAACc,OAAD,EAAUyC,YAAV,EAAwBnD,mBAAmB,CAACF,eAAe,CAAC,GAAGyD,UAAJ,CAAhB,CAA3C,CAAzB;AAEA,eAAeC,KAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers';\r\nimport { cartReducer } from './reducers/cartReducers';\r\nimport {\r\n\torderCreateReducer,\r\n\torderDetailsReducer,\r\n\torderPayReducer,\r\n\torderDeliverReducer,\r\n\torderListMyReducer,\r\n\torderListReducer\r\n} from './reducers/orderReducers';\r\n\r\nconst reducer = combineReducers({\r\n\tproductList         : productListReducer,\r\n\tproductDetails      : productDetailsReducer,\r\n\tproductDelete       : productDeleteReducer,\r\n\tproductCreate       : productCreateReducer,\r\n\tproductUpdate       : productUpdateReducer,\r\n\tproductReviewCreate : productReviewCreateReducer,\r\n\tproductTopRated     : productTopRatedReducer,\r\n\tcart                : cartReducer,\r\n\tuserLogin           : userLoginReducer,\r\n\tuserRegister        : userRegisterReducer,\r\n\tuserDetails         : userDetailsReducer,\r\n\tuserUpdateProfile   : userUpdateProfileReducer,\r\n\tuserList            : userListReducer,\r\n\tuserDelete          : userDeleteReducer,\r\n\tuserUpdate          : userUpdateReducer,\r\n\torderCreate         : orderCreateReducer,\r\n\torderDetails        : orderDetailsReducer,\r\n\torderPay            : orderPayReducer,\r\n\torderDeliver        : orderDeliverReducer,\r\n\torderListMy         : orderListMyReducer,\r\n\torderList           : orderListReducer\r\n});\r\n\r\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\r\n\r\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\r\n\r\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress')\r\n\t? JSON.parse(localStorage.getItem('shippingAddress'))\r\n\t: {};\r\n\r\nconst initialState = {\r\n\tcart      : {\r\n\t\tcartItems       : cartItemsFromStorage,\r\n\t\tshippingAddress : shippingAddressFromStorage\r\n\t},\r\n\tuserLogin : { userInfo: userInfoFromStorage }\r\n};\r\n\r\nconst middleware = [\r\n\tthunk\r\n];\r\n\r\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\r\n\r\nexport default store;\r\n\r\n/*\r\n\r\n\r\n\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers';\r\nimport { cartReducer } from './reducers/cartReducers';\r\n\r\n\r\n\r\n\r\n\r\nconst reducer = combineReducers({\r\n\tproductList    : productListReducer,\r\n\tproductDetails : productDetailsReducer,\r\n\tcart           : cartReducer\r\n});\r\n\r\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\r\n\r\nconst initialState = {\r\n\tcart : { cartItems: cartItemsFromStorage }\r\n};\r\n\r\nconst middleware = [\r\n\tthunk\r\n];\r\n\r\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\r\n\r\nexport default store;\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}